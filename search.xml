<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Vue 2.0 学习之旅（一）--安装]]></title>
    <url>%2F2018%2F09%2F29%2Ffirst%2F</url>
    <content type="text"><![CDATA[从今天开始学习前端框架 Vue，该系列的文章主要记录自己在 Vue 的学习过程中所了解到的一些基础知识。 兼容性Vue不支持 IE8 及以下版本。 辅助工具在使用 Vue 时推荐在浏览器上安装 Vue Devtools。它允许你在一个更友好的界面中审查和调试 Vue 应用。 Vue.js 安装教程直接下载直接下载vue.js文件，然后通过&lt;script>标签引用。&lt;script src=&quot;/地址/vue.js&quot;&gt;&lt;/script&gt; CDN 方法 BootCDN（国内） :&lt;script src=&quot;https://cdn.bootcss.com/2.5.16/vue.js&quot;&gt;&lt;/script&gt; 其它（国外）：&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https:/unpkg.com/vue@2.5.16/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.16/vue.js&quot;&gt;&lt;/script&gt;改变&lt;script>标签内的数字就可以手动选择 Vue.js 的不同版本。关于 Vue.js 的版本情况你可以登录 http://www.bootcdn.cn/ 或者其他网址查看。版本说明开发版本 vue.js 包含完整的警告和调试模式（建议学习过程中使用该版本）生产版本 vue.min.js 是一个更小的构建，可以获得比开发环境下更快的速度体验。（建议在实际项目中使用该版本）下面附上一张第一次成功运行的图片：]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F03%2F30%2Feleven%2F</url>
    <content type="text"><![CDATA[title： Vue 2.0 学习之旅–组件date： 2018-03-30tag： category：[Vue,Vue组件]组件(compone)是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js的编译器为它添加特殊功能。 所有的 Vue 组件同时也都是 Vue 的实例，所以可接受相同的选项对象（除了一些根级特有的选项）并提供相同的生命钩子。 全局注册]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F03%2F30%2Feight%2F</url>
    <content type="text"><![CDATA[title： Vue 2.0 学习之旅（）–指令date： 2018-03-30tag： [表单输入相关，v-model] category：[ Vue,Vue 指令]v-model]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F03%2F30%2Ften%2F</url>
    <content type="text"><![CDATA[title： Vue 2.0 学习之旅（）–指令date： 2018-03-30tag： [事件处理，v-on] category：[ Vue,Vue 指令]v-on]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F03%2F30%2Fsix%2F</url>
    <content type="text"><![CDATA[title： Vue 2.0 学习之旅（）–指令date： 2018-03-30tag： [Class 与 Style绑定，v:bind] category：[ Vue,Vue 指令]v-bind]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F03%2F30%2Fseven%2F</url>
    <content type="text"><![CDATA[title： Vue 2.0 学习之旅（）–指令 date： 2018-03-30 tag： [列表渲染，v-for] category：[ Vue,Vue 指令]v-for 指令主要用于迭代，迭代的目标可以是数组、对象、值和组件。 数组的 v-forv-for 指令根据一组数组的选项列表进行渲染。v-for 指令需要使用 item in items 形式的特殊语法，items 是源数据数组，item是数组元素迭代的别名。在 v-for块 中，我们拥有对父作用域属性的完全访问权限。v-for 还支持一个可选的第二个参数作为当前的索引。你可以用 of 代替 in 作为分隔符。 对象的 v-for你可以用 v-for 通过一个对象的属性来迭代。你也可以提供第二个参数为键名。你还可以提供第三个参数为索引。key、数组更新检测、对象更新检测、显示过滤/排序结果此处暂不作说明。 值的 v-forv-for 也可以是整数。v-for on a &lt;template> 暂不作说明。v-for with v-if当 v-for 和 v-if 处于同一节点的时候，v-for 的优先级比 v-if 的更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。而如果你的目的是有条件的跳过循环的执行，那么可以将 v-if 置于外层元素上。 组件的 v-for关于组件的 v-for 暂时不作说明，等学完组件之后再来更新。]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F03%2F30%2Ffive%2F</url>
    <content type="text"><![CDATA[title： Vue 2.0 学习之旅（）–指令date： 2018-03-30tag： [v-text,v-html,v-pre,v-once,v-cloak] category：[ Vue,Vue 指令]v-textv-htmlv-prev-oncev-cloak]]></content>
  </entry>
  <entry>
    <title><![CDATA[github 文件管理]]></title>
    <url>%2F2018%2F03%2F30%2F%E6%96%B0%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[github文件管理##1.在电脑的任意位置处新建一个文件夹 2.进入文件夹，鼠标右键选择 git-bash-here 3.输入命令 git init 4.输入命令 git clone （你的仓库地址） 5.输入命令 git rm -r 6.输入命令 git rm 7.输入命令 git commit -m 8.输入命令 git push origin master]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github文件管理</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F03%2F29%2F%E6%96%B0%E6%96%87%E6%A1%A32%2F</url>
    <content type="text"><![CDATA[github与hexo关联1.在电脑任意位置处新建一个文件夹 2.进入文件夹，鼠标右键选择gitbash 3.输入命令hexo init]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F03%2F29%2F%E6%96%B0%E6%96%87%E6%A1%A31%2F</url>
    <content type="text"><![CDATA[title： Vue 2.0 学习之旅–Vue 实例date： 2018-3-29tag： Vue实例 category： [ Vue，Vue 实例]vue 2.0 学习之旅Vue实例每个Vue应用都是通过用 Vue 函数创建一个新的 Vue 实例开始的： 123var vm=new Vue(&#123; //选项&#125;) 当创建一个 Vue 实例对象之后，你可以传入一个选项对象。一个 Vue 应用由一个通过 new Vue 创建的根 Vue 实例，以及可嵌套的、可复用的组件树构成。当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有属性。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。 举例：]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F29%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[Vue 2.0 学习之旅（三）--指令]]></title>
    <url>%2F2018%2F03%2F29%2Fsecond%2F</url>
    <content type="text"><![CDATA[指令（Directives）是带有 v- 前缀的特殊属性。指令属性的值预期是单个 Javascript 表达式（v-for 是例外情况）。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于DOM。 v-text指令v-text指令用于操作元素当中的文本，其实际作用与“Mustache”语法(双大括号)的效果是一致的。但是注意，使用v-text会替换掉元素内的所有文本内容，如果只想替换掉其中的部分文本，需要使用“Mustache”语法(双大括号)。 v-html指令v-html指令和v-text指令的区别在于，v-text将HTML的标签当做纯文本进行输出，而v-html会将HTML的标签解析后再输出。注意下面代码的输出结果的区别： v-once指令v-once指令用于执行一次性的插值，当数据改变时，插值处的内容不会更新。该指令会影响到该节点上的所有数据绑定： v-if指令v-if指令用于控制一个元素的显示与否，当表达式的值为真，则显示该元素；当表达式的值为假，则不显示该元素： v-showv-show指令和v-if指令一样，都是用来控制一个元素的显示与否，当表达式的值为真，则显示该元素；当表达式的值为假，则不显示该元素。v-if和v-show的区别在于，v-if在表达式为假的时候，将该元素节点从DOM树上删除；而v-show在表达式为假的时候，是为该元素追加display：none，的属性。]]></content>
  </entry>
</search>
